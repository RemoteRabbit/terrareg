name: Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lua-version: ["5.1", "5.4"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Lua ${{ matrix.lua-version }}
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: ${{ matrix.lua-version }}

      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install dependencies
        run: |
          luarocks install busted
          luarocks install luacov

      - name: Run unit tests
        run: |
          export PATH="$HOME/.luarocks/bin:$PATH"
          busted test/terrareg_spec.lua test/config_validation_spec.lua --verbose

      - name: Generate coverage report
        run: |
          export PATH="$HOME/.luarocks/bin:$PATH"
          busted --coverage test/terrareg_spec.lua test/config_validation_spec.lua
          luacov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./luacov.report.out
          flags: unit-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        neovim-version: ["stable", "nightly"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Lua
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.1"

      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install test dependencies
        run: |
          luarocks install busted

      - name: Setup Neovim ${{ matrix.neovim-version }}
        uses: rhymond/setup-neovim@v1
        with:
          neovim-version: ${{ matrix.neovim-version }}

      - name: Install plenary.nvim
        run: |
          git clone --depth=1 https://github.com/nvim-lua/plenary.nvim.git ~/.local/share/nvim/site/pack/test/start/plenary.nvim

      - name: Run integration tests
        run: |
          export PATH="$HOME/.luarocks/bin:$PATH"
          nvim --version
          nvim --headless -u test/minimal_init.lua \
            -c "lua vim.opt.rtp:prepend('$HOME/.local/share/nvim/site/pack/test/start/plenary.nvim')" \
            -c "lua require('plenary.test_harness').test_directory('test/', { minimal_init = 'test/minimal_init.lua', sequential = true })" \
            -c "qa!"

  linting:
    name: Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Lua
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.1"

      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install luacheck
        run: luarocks install luacheck

      - name: Run luacheck
        run: |
          export PATH="$HOME/.luarocks/bin:$PATH"
          luacheck lua/ test/

  formatting:
    name: Code Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup StyLua
        uses: JohnnyMorganz/stylua-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: latest
          args: --check lua/ test/

  cross-platform:
    name: Cross Platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        neovim-version: ["stable"]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Lua
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.1"

      - name: Setup LuaRocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install dependencies
        run: |
          luarocks install busted

      - name: Setup Neovim
        uses: rhymond/setup-neovim@v1
        with:
          neovim-version: ${{ matrix.neovim-version }}

      - name: Run basic tests on ${{ matrix.os }}
        shell: bash
        run: |
          export PATH="$HOME/.luarocks/bin:$PATH"
          # Run basic unit tests to ensure cross-platform compatibility
          busted test/terrareg_spec.lua --verbose

  plugin-validation:
    name: Plugin Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Neovim
        uses: rhymond/setup-neovim@v1
        with:
          neovim-version: stable

      - name: Test plugin loading
        run: |
          # Test that plugin loads without errors in a minimal Neovim setup
          nvim --headless -u test/minimal_init.lua \
            -c "lua print('Plugin loaded successfully: ' .. tostring(require('terrareg') ~= nil))" \
            -c "qa!"

      - name: Test plugin setup
        run: |
          # Test that plugin setup works
          nvim --headless -u test/minimal_init.lua \
            -c "lua require('terrareg').setup({ debug = true })" \
            -c "lua print('Setup completed successfully')" \
            -c "qa!"

      - name: Validate plugin structure
        run: |
          # Check that all required files exist
          test -f lua/terrareg/init.lua || (echo "Missing main module" && exit 1)
          test -f plugin/terrareg.lua || (echo "Missing plugin file" && exit 1)
          test -f doc/terrareg.txt || (echo "Missing help documentation" && exit 1)
          echo "Plugin structure validation passed"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Neovim
        uses: rhymond/setup-neovim@v1
        with:
          neovim-version: stable

      - name: Test startup performance
        run: |
          # Test that plugin startup doesn't significantly impact Neovim startup time
          time nvim --headless -u test/minimal_init.lua \
            -c "lua require('terrareg').setup()" \
            -c "qa!" > /dev/null 2>&1
          echo "Performance test completed"

  test-summary:
    name: Test Summary
    needs: [unit-tests, integration-tests, linting, formatting, cross-platform, plugin-validation, performance]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check all tests passed
        run: |
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.linting.result }}" != "success" ]]; then
            echo "❌ Linting failed"
            exit 1
          fi
          if [[ "${{ needs.formatting.result }}" != "success" ]]; then
            echo "❌ Code formatting failed"
            exit 1
          fi
          if [[ "${{ needs.cross-platform.result }}" != "success" ]]; then
            echo "❌ Cross-platform tests failed"
            exit 1
          fi
          if [[ "${{ needs.plugin-validation.result }}" != "success" ]]; then
            echo "❌ Plugin validation failed"
            exit 1
          fi
          if [[ "${{ needs.performance.result }}" != "success" ]]; then
            echo "❌ Performance tests failed"
            exit 1
          fi
          echo "✅ All tests passed successfully!"
